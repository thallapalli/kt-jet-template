<?js
  var data = obj;
  this.propsTypeParams = data.propsTypeParams;
  var props = data.properties? Object.keys(data.properties).sort(): undefined;

  if (data.imports){
    for (let i = 0; i < data.imports.length; i++){ ?>
<?js= data.imports[i] ?>
  <?js
    }
  }?>
export interface <?js= data.vcomponentNameWithGenerics ?> extends JetElement<<?js= settablePropertiesInterface ?>> {
<?js
  if (data.properties){ ?>
    <?js= this.partial('properties.tmpl', data) ?>
  <?js
  } ?>
  addEventListener<T extends keyof <?js= data.eventMapInterface ?>>(type: T, listener: (this: HTMLElement, ev: <?js= data.eventMapInterface ?>[T]) => any, useCapture?: boolean): void;
  addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;
  getProperty<T extends keyof <?js= data.settablePropertiesInterface ?>>(property: T): <?js= data.vcomponentNameWithGenerics ?>[T];
  getProperty(property: string): any;
  setProperty<T extends keyof <?js= data.settablePropertiesInterface ?>>(property: T, value: <?js= data.settablePropertiesInterface ?>[T]): void;
  setProperty<T extends string>(property: T, value: JetSetPropertyType<T, <?js= data.settablePropertiesInterface ?>>): void;
  setProperties(properties: <?js= data.settablePropertiesLenientInterface ?>): void;
}
<?js
if (data.events || props){?>
export namespace <?js= data.vcomponentName ?> {
<?js= this.partial('events.tmpl', data.events) ?>
<?js
if (props){
  for (let prop of props) {?>
  // tslint:disable-next-line interface-over-type-literal
  type <?js= prop ?>Changed<?js= this.propsTypeParams ?> = JetElementCustomEvent<<?js= data.vcomponentNameWithGenerics ?>["<?js= prop ?>"]>;
<?js
  }
}?>
}
<?js
}?>
export interface <?js= data.eventMapInterface ?> extends HTMLElementEventMap {
<?js
for (let event in data.events) {
  let eventPropEvent = `'${event}': ${data.vcomponentName}.${event}`;
  const eventDetailType = data.events[event]['reftype'];
  if (eventDetailType && eventDetailType.indexOf('<') > 0 && eventDetailType.indexOf('>') > 1) {
    eventPropEvent = `'${event}': ${data.vcomponentName}.${event}${this.propsTypeParams};`
  } ?>
  <?js= eventPropEvent ?>
<?js
}
if (props){
  for (let prop of props) {
    let propEvent = `'${prop}Changed': JetElementCustomEvent<${data.vcomponentNameWithGenerics}["${prop}"]>;`; ?>
  <?js= propEvent ?>
<?js
  }
}?>
}
export interface <?js= data.settablePropertiesInterface ?> extends JetSettableProperties {
<?js
if (data.properties){ ?>
  <?js= this.partial('properties.tmpl', data) ?>
<?js
} ?>
}
export interface <?js= data.settablePropertiesLenientInterface ?> extends Partial<<?js= data.settablePropertiesInterface ?>> {
  [key: string]: any;
}
<?js
if (data.legacyComponentName){ ?>
export declare type <?js= data.legacyComponentNameWithGenerics ?> = <?js= data.vcomponentNameWithGenerics ?>;
export declare type <?js= data.legacyEventMapInterface ?> = <?js= data.eventMapInterface ?>;
export declare type <?js= data.legacySettablePropertiesInterface ?> = <?js= data.settablePropertiesInterface ?>;
export declare type <?js= data.legacySettablePropertiesLenientInterface ?> = <?js= data.settablePropertiesLenientInterface ?>;
<?js
}?>

<?js= this.partial('jsxInterfaces.tmpl', data) ?>

