// Copyright (c) 2014, 2020, Oracle and/or its affiliates.  Licensed under The Universal Permissive License (UPL), Version 1.0 as shown at https://oss.oracle.com/licenses/upl/


//------------------------------------------------------------------------------------------------
// Some mixins for *-label-inline and *-labels-inline
//------------------------------------------------------------------------------------------------
@import "../../../utilities/_oj.utilities.scss";
@import "../../../radio-checkbox/themes/redwood/oj-radiocheckbox.cssvars";

// This inline label mixin is applied to the odd elements
@mixin oj-inline-label-support-odd($selectorPrefix, 
                               $labelInlineGutter: $formControlLabelInlineGutter, 
                               $labelInlineAlign: $formLayoutLabelInlineAlign, 
                               $fieldInlineAlign: $formLayoutFieldInlineAlign)
{
  // we're using width of 100% and so on for the case where 
  // the label-nowrap classes are used.
  // See the form layout demo titled "label wrapping" 
  // before checking the values in here
  width: 100%;
  box-sizing: border-box;
  overflow: hidden;
  text-overflow: ellipsis;


    text-align: var(#{$labelInlineAlign});
    html[dir="rtl"] & {
      text-align: var(#{$labelInlineAlign}-rtl);
    }


}


@mixin oj-inline-label-support-text-field {
  &.oj-inputtext-label,
  &.oj-inputpassword-label,
  &.oj-inputnumber-label,
  &.oj-inputdate-label,
  &.oj-inputtime-label,
  &.oj-inputdatetime-label,
  &.oj-select-label,
  &.oj-combobox-label {
    min-height: var(--oj-text-field-height);
  }
}


// when we don't float, then the order of the dom is the order of what
// you see, so we want spacing after the icons, not before.
@mixin oj-inline-label-support-non-float-spacing()
{

    html:not([dir="rtl"]) & {
      margin-left: 0;
      margin-right: 6px;
    }
    html[dir="rtl"] & {
      margin-right: 0;
      margin-left: 6px;
    }


}


// This is for cases where there are label modifiers (required, etc), in which case
// the properties below need to be inherited by oj-label-group
// otherwise the ellipsis doesn't show when the label-nowrap classes are used.
// See the form layout demo titled "label wrapping" 
// before checking the values in here
// line-height is needed so that the label has enough height to show borders.
// line-height on label itself has no effect.
@mixin oj-inline-label-support-with-modifiers()
{
  width: inherit;
  overflow: inherit;
  text-overflow: inherit;
  line-height: 1.6em;
}

//-------------------------------------------------------------------------------------------------
// Create common form layout classes that are used by css and element form layout
//
//-------------------------------------------------------------------------------------------------
@mixin oj-form-layout-common($selectorPrefix, 
                             $labelInlineGutter: $formControlLabelInlineGutter, 
                             $labelInlineAlign: $formLayoutLabelInlineAlign, 
                             $fieldInlineAlign: $formLayoutFieldInlineAlign)
{
  // nowrap label support
  .oj-form > .oj-flex > .oj-flex-item:nth-child(odd) > .#{$selectorPrefix}-label-nowrap,
  .#{$selectorPrefix}-labels-nowrap > .oj-flex > .oj-flex-item:nth-child(odd) > .oj-label,
  .#{$selectorPrefix}-labels-nowrap > .oj-flex > .oj-flex-item:nth-child(odd) > .oj-label-nocomp,
  .#{$selectorPrefix}-labels-nowrap > .oj-flex > .oj-flex-item > .oj-form-control-label-top .oj-label,
  .#{$selectorPrefix}-labels-nowrap > .oj-flex > .oj-flex-item > .oj-label-value .oj-label {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  // inline label suport
  .#{$selectorPrefix}-labels-inline > .oj-flex > .oj-flex-item:nth-child(odd) > .oj-label,
  .#{$selectorPrefix}-labels-inline > .oj-flex > .oj-flex-item:nth-child(odd) > .oj-label-nocomp {
    @include oj-inline-label-support-odd($selectorPrefix, 
                                         $labelInlineGutter, 
                                         $labelInlineAlign, 
                                         $fieldInlineAlign);
  }

  // inline field suport
  .#{$selectorPrefix}-labels-inline > .oj-flex > .oj-flex-item:nth-child(even) {

      text-align: var(#{$fieldInlineAlign});
      html[dir="rtl"] & {
        text-align: var(#{$fieldInlineAlign}-rtl);
      }


  }

  // without this, the required icon is chopped off at top in Chrome.
  .#{$selectorPrefix}-labels-inline > .oj-flex > .oj-flex-item:nth-child(odd) .oj-label-required-icon {
     margin-top: 1px;
  }

  // when labels are inline we don't float. 
  .#{$selectorPrefix}-labels-inline > .oj-flex > .oj-flex-item:nth-child(odd) .oj-label-required-icon,
  .#{$selectorPrefix}-labels-inline > .oj-flex > .oj-flex-item:nth-child(odd) .oj-label-help-icon,
  .#{$selectorPrefix}-labels-inline > .oj-flex > .oj-flex-item:nth-child(odd) label,
  .#{$selectorPrefix}-labels-inline > .oj-flex > .oj-flex-item:nth-child(odd) .oj-label-help-icon-anchor {
     float:none; 
  }
  
  // when labels are inline we don't float so we need to add spacing. 
  .#{$selectorPrefix}-labels-inline > .oj-flex > .oj-flex-item:nth-child(odd) .oj-label-required-icon,
  .#{$selectorPrefix}-labels-inline > .oj-flex > .oj-flex-item:nth-child(odd) .oj-label-help-icon {
     @include oj-inline-label-support-non-float-spacing();
  }
  
  
  .#{$selectorPrefix} .oj-form.oj-enabled.oj-form-cols-labels-inline .oj-label,
  .#{$selectorPrefix}-labels-inline > .oj-flex > .oj-flex-item > .oj-label,
  .#{$selectorPrefix}-labels-inline > .oj-flex > .oj-flex-item > .oj-label-nocomp {
    display: inline-flex;
    align-items: center;

    html:not([dir="rtl"]) & {
      padding-right: var(#{$labelInlineGutter});
    }
    html[dir="rtl"] & {
      padding-left: var(#{$labelInlineGutter});
    }
  }

  

  oj-form-layout > .oj-form.oj-enabled.oj-form-cols-labels-inline  > .oj-flex > .oj-flex-item > .oj-label,
  oj-label-value.#{$selectorPrefix}-labels-inline > .oj-flex > .oj-flex-item > .oj-label:not(.oj-read-only) ,
  oj-label-value.#{$selectorPrefix}-labels-inline > .oj-flex > .oj-flex-item > .oj-label-nocomp {
    @include oj-inline-label-support-text-field();
  }
  
  oj-form-layout > .oj-form.oj-enabled.oj-form-cols-labels-inline  > .oj-flex > .oj-flex-item > .oj-label.oj-textarea-label,
  oj-label-value.#{$selectorPrefix}-labels-inline > .oj-flex > .oj-flex-item > .oj-textarea-label:not(.oj-read-only) {
    margin-top: .5rem;
  }
  
  
  // when the label should be top aligned
  .#{$selectorPrefix}-labels-inline > .oj-flex > .oj-flex-item > .oj-label-inline-top,
  .#{$selectorPrefix}-labels-inline > .oj-flex > .oj-flex-item > .oj-label-nocomp.oj-label-for-non-control {
    margin-top: 0;
  }

  
  // center a start aligned label with the center of the switch
  .#{$selectorPrefix} .oj-form.oj-enabled.oj-form-cols-labels-inline .oj-label.oj-switch-label,
  .#{$selectorPrefix}-labels-inline > .oj-flex > .oj-flex-item > .oj-switch-label:not(.oj-read-only) {
    min-height: var(--oj-core-touch-target-min-size);
  }
  
  // center a start aligned label with the center of the slider, 
  // slider doesn't support readonly so leave off the oj-enabled
  .#{$selectorPrefix} .oj-form.oj-form-cols-labels-inline .oj-label.oj-slider-label,
  .#{$selectorPrefix}-labels-inline > .oj-flex > .oj-flex-item > .oj-slider-label:not(.oj-read-only) {
    min-height: var(--oj-core-touch-target-min-size);
    align-items: center; // needed for all readonly form
  }

  .#{$selectorPrefix} .oj-form.oj-enabled.oj-form-cols-labels-inline .oj-label.oj-radioset-label,
  .#{$selectorPrefix} .oj-form.oj-enabled.oj-form-cols-labels-inline .oj-label.oj-checkboxset-label,
  .#{$selectorPrefix}-labels-inline > .oj-flex > .oj-flex-item > .oj-radioset-label:not(.oj-read-only),
  .#{$selectorPrefix}-labels-inline > .oj-flex > .oj-flex-item > .oj-checkboxset-label:not(.oj-read-only) {
    margin-top: var(--oj-radio-checkbox-row-padding);
    min-height: var(--oj-radio-checkbox-row-height);
    align-items: var(--oj-radio-checkbox-align-items);
  }

  // This is for cases where there are label modifiers (required, etc), in which case
  // the properties below need to be inherited by oj-label-group
  // otherwise the ellipsis doesn't show when the label-nowrap classes are used.
  // See the form layout demo titled "label wrapping" 
  // before checking the values in here
  // line-height is needed so that the label has enough height to show borders.
  // line-height on label itself has no effect.
  .oj-form > .oj-flex > .oj-flex-item:nth-child(odd) > .#{$selectorPrefix}-label-nowrap  .oj-label-group,
  .#{$selectorPrefix}-labels-nowrap > .oj-flex > .oj-flex-item:nth-child(odd) > .oj-label  .oj-label-group {
    width: inherit;
    overflow: inherit;
    text-overflow: inherit;
  }
  
  .#{$selectorPrefix}-labels-inline > .oj-flex > .oj-flex-item:nth-child(odd) > .oj-label .oj-label-group {
    @include oj-inline-label-support-with-modifiers();
  }

  // if it's a no component label and it's for a form control* set the line height so things
  // match exactly. we put line-height on component labels to line things up and to give room
  // for the required and help icons.
  // *(inline label in a oj-flex > .oj-flex-item; we do not float, thus we need line-height
  // to maintain label's height.
  .#{$selectorPrefix}-labels-inline > .oj-flex > .oj-flex-item:nth-child(odd) > 
    .oj-label-nocomp:not(.oj-label-for-non-control) {
    line-height: 1.6em;
  }

  // in the 'across' case where you have multiple fields in the same row you need padding between the first field and the second label

  .#{$selectorPrefix}-form-across > .oj-flex > .oj-flex-item:nth-child(odd) {
    html:not([dir="rtl"]) & {
      padding-left: calc(var(--oj-form-layout-column-gutter) / 2);
    }
    html[dir="rtl"] & {
      padding-right: calc(var(--oj-form-layout-column-gutter) / 2);
    }
  }

  // Add padding to every even flex item, except the last one.
  .#{$selectorPrefix}-form-across > .oj-flex > .oj-flex-item:nth-child(even) {
    html:not([dir="rtl"]) & {
      padding-right: calc(var(--oj-form-layout-column-gutter) / 2);
    }
    html[dir="rtl"] & {
      padding-left: calc(var(--oj-form-layout-column-gutter) / 2);
    }
  }
  .#{$selectorPrefix}-form-across > .oj-flex > .oj-flex-item:last-child {
    html:not([dir="rtl"]) & {
      padding-right: calc(var(--oj-form-layout-horizontal-margin) / 2);
    }
    html[dir="rtl"] & {
      padding-left: calc(var(--oj-form-layout-horizontal-margin) / 2);
    }
  }
  .#{$selectorPrefix}-form-across > .oj-flex > .oj-flex-item:first-child {
    html:not([dir="rtl"]) & {
      padding-left: 0;
    }
    html[dir="rtl"] & {
      padding-right: 0;
    }
  }

  .#{$selectorPrefix}-form-across > .oj-flex > .oj-flex-item:last-child {
    html:not([dir="rtl"]) & {
      padding-right: 0;
    }
    html[dir="rtl"] & {
      padding-left: 0;
    }
  }
  // For the form across, we need to remove the left/right padding from the .oj-flex div as the padding is
  // on the even/odd .oj-flex-item divs (see above)
  .oj-form.#{$selectorPrefix}-form-across > .oj-flex {
    padding-left: 0;
    padding-right: 0;
  }
  // For some reason, iOS theme applies padding to the .oj-form, so we need to undo that for the across case
  // here so that we can specify the .#{$selectorPrefix}-form-across class
  .oj-form.#{$selectorPrefix}-form-across {
    @include oj-ltr()
    {
      padding-left: 0;
    }
    @include oj-rtl()
    {
      padding-right: 0;
    }
  }
  .oj-form.#{$selectorPrefix}-form-across > .oj-flex {
    @include oj-ltr()
    {
      padding-right: 0;
    }
    @include oj-rtl()
    {
      padding-left: 0;
    }
  }

}


// changes for when the column drops to one column
@mixin oj-form-columns($selectorPrefix, 
                       $labelInlineGutter: $formControlLabelInlineGutter)
{
  .oj-form-layout.#{$selectorPrefix}-flex-direction-column > .oj-flex-item:not(:last-child) > .oj-form > .oj-flex:last-child {

      border-width: 0 0 var(--oj-form-layout-divider-width) 0;


  }
}

// Css FormLayout utility selectors
@mixin common-formlayout-selectors() {
  // Since these are actual selectors in this mixin, we only want to add them once
  @include module-include-once("common.formlayout.selectors") {
    // The technique used in these column classes use css multi column layout.
    // http://dev.w3.org/csswg/css-multicol/ 
    // With this layout the columns should automatically be 
    // approximately the same heights.
    .oj-form-cols-labels-inline { 

        column-width: var(--oj-form-layout-start-label-column-min-width);
        column-gap: var(--oj-form-layout-column-gutter);


    } 

    .oj-form-cols {

        column-width: var(--oj-form-layout-column-min-width);
        column-gap: var(--oj-form-layout-column-gutter);


    } 

    // without controlling breaking then in some cases a label will 
    // show up in the first column but its associated field will show 
    // up in the second column.
    .oj-form-cols > .oj-flex,
    .oj-form-cols-labels-inline > .oj-flex { 

     // -moz-column-break-inside doesn't work on FF 24 on windows
     // try adding page-break-inside as well
     -moz-column-break-inside: avoid;
      -ms-column-break-inside: avoid;
                 break-inside: avoid;
      page-break-inside: avoid; 
    } 



    // headers inside a form layout have different margins than regular headers
    .oj-form > hr,
    .oj-form > h1,
    .oj-form > h2,
    .oj-form > h3,
    .oj-form > h4 {
      // the margins above and below are 15px, but there's
      // already the formlayout margin bottom above, so subtract that
      // from the top

        margin: calc(15px - var(--oj-form-layout-margin-bottom)) 0 15px 0;


    }


    //
    // Stacked (non-responsive) form layout
    //

    .oj-form > .oj-form-control,
    .oj-form > .oj-form-non-control {

        margin-bottom: var(--oj-form-layout-margin-bottom);


    }

    // when a form is nested reset the text align to start, otherwise the field's
    // text-align property will be inherited
    .oj-form > .oj-flex > .oj-flex-item > .oj-form{

        text-align: left;
        html[dir="rtl"] & {
          text-align: right;
        }


    }


    // Originally the margin was on .oj-form .oj-flex. However there was a problem.
    // In the "across" form layout there's 4 grid cells in a row. 
    // On large screens these 4 cells are all on one line. 
    // But on medium screens the first 2 cells stay on the 
    // first line and the second 2 cells wrap to a new line 
    // to create a second "row". However there's no actual row 
    // class in this case, so the margins need to be on the field columns.
    //
    // The :last-child is to handle cases where there is a colspan
    // across all the cells.
    //
    // See the form layout demo titled "inline responsive across" 
    // before checking in any changes to where the margin is placed.
    .oj-form > .oj-flex > .oj-flex-item:nth-child(even),
    .oj-form > .oj-flex > .oj-flex-item:last-child {

        margin: 0 0 calc(var(--oj-form-layout-margin-bottom) - var(--oj-core-wrappable-margin-bottom)) 0;


    }

    .oj-form > .oj-flex > .oj-flex-item > .oj-form-non-control {

        margin-bottom: var(--oj-core-wrappable-margin-bottom);


    }



    // borders around the form

      .oj-form-layout {
        border-color: var(--oj-form-layout-border-color);
        border-style: solid;
        border-width: var(--oj-form-layout-border-width) 0 0;
      }

      .oj-form-layout-inset {
        // todo: use vars from Amy's padding classes?
        margin: var(--oj-form-layout-inset-margin);
        border-width: var(--oj-form-layout-border-width);
      }



    // dividers between rows
    
      .oj-form > .oj-flex {
        border-style: solid;
        border-color: var(--oj-form-layout-divider-color);
        border-width: 0 0 var(--oj-form-layout-divider-width) 0;
        padding: var(--oj-form-layout-divider-margin) 0 0;
      }

      .oj-form-layout > .oj-form[class*="oj-form-cols-"] > .oj-flex:last-child {
        border-width: 0 0 var(--oj-form-layout-divider-width) 0;
      }


    // no border on the last row
    .oj-form > .oj-flex:last-child{
      border-width: 0;
    }
  }
}