// Copyright (c) 2014, 2020, Oracle and/or its affiliates.  Licensed under The Universal Permissive License (UPL), Version 1.0 as shown at https://oss.oracle.com/licenses/upl/

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// WARNING: do not directly import this file, instead import the 
//          version in your base theme's directory, 
//          for example alta/widgets/_oj.alta.formcontrol.inputnumber.scss
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


@import "../../../utilities/_oj.utilities.scss";
@import "../../../form-control/themes/base/_oj-form-control.mixins.scss";

  @include module-include-once("common.inputnumber") {

    /* inputnumber */
    /* --------------------------------------------------------------- */

    // This is to prevent the flash of unstyled content before the html becomes JET components.
    @if $initialVisibility == hidden {
      oj-input-number:not(.oj-complete) {
        visibility: hidden;
      }      
    }

    .oj-inputnumber-wrapper {
      width: 100%; 
      // do not allow the buttons to wrap to the next line
      white-space: nowrap;
      // use inline-flex properties. This will grow the input and the buttons will take up 
      // the remaining width
      display: inline-flex;

    }

    /* Input field for inputnumber */
    .oj-inputnumber-input { 
      
      // grow the input using the flex property
      flex: 1;
      // needed for the input to be able to shrink smaller than the browser
      // default width.  Because this has flex-grow of 1, it will always grow
      // to the available space of the parent container, which is what we want.
      width: 1em;
      // needed or else the input could overflow the container
      min-width: 1em;
      
      font-size: 100%;

      // TODO, We need to think about getting rid of this mixin and move the relevant style to 
      // container
      @include oj-form-control-input-css-vars;
      
      // TODO: Check to see if this is still needed
      @include oj-form-control-content-no-focus-padding($outputCssVars: true);
            
    }

    // Height is on an ancestor element, so set the the height to 100%
    .oj-inputnumber .oj-inputnumber-wrapper {
      height: 100%;
    }

    // space between input and buttons, if any
    // note: need both of these because the old widget ojInputNumber
    // doesn't have the oj-text-field-middle
    // putting margin-right on input directly does not work for 
    // custom elements. It needs to be on the oj-text-field-middle dom.
    .oj-inputnumber.oj-has-buttons .oj-inputnumber-input,
    .oj-inputnumber.oj-has-buttons .oj-text-field-middle {
        html:not([dir="rtl"]) & {
          margin-right: var(--oj-input-number-input-to-button-margin);
        }
        html[dir="rtl"] & {
          margin-left: var(--oj-input-number-input-to-button-margin);
        } 
    }

    /* Disabled styling for the widget */

    .oj-inputnumber.oj-disabled .oj-inputnumber-input {
        color: var(--oj-text-field-value-color-disabled);
        opacity: var(--oj-text-field-opacity-disabled);
    }

    /* styling for inputNumber's buttonset/buttons */
    // if there is space between input and buttons, then the buttons act like a buttonset
    // if there isn't space, then it looks like the input and buttons are wrapped in a single border.
    
    // hide buttons when in readonly mode
    .oj-inputnumber.oj-read-only .oj-buttonset {
      display: none;
    }
    
    // don't show button's built-in focus outline.
    .oj-inputnumber-button.oj-button.oj-focus {
      outline-style: none;
    }

    @if $inputNumberButtonChromingOptionDefault == borderless {

      .oj-inputnumber .oj-buttonset {
        // make the margin relative to the small button height, subtract 2px for any border
        
        @include oj-ltr() {
          margin-right: calc((var(--oj-text-field-height) - var(--oj-button-sm-height) -2px)/2);
        }
        @include oj-rtl() {
          margin-left: calc((var(--oj-text-field-height) - var(--oj-button-sm-height) -2px)/2);
        }
      }
      
      .oj-inputnumber:not(.oj-text-field-label-inside) .oj-inputnumber-button {
        min-width: var(--oj-button-sm-height);
        width: var(--oj-button-sm-height);
        height: var(--oj-button-sm-height);
        line-height: var(--oj-button-sm-height);
      }

      .oj-text-field-label-inside .oj-inputnumber .oj-buttonset {
        // make the margin relative to the button height, subtract 2px for any border
        @include oj-ltr() {
          margin-right: calc((var(--oj-text-field-inside-height) - var(--oj-button-height) -2px) / 2);
        }
        @include oj-rtl() {
          margin-left: calc((var(--oj-text-field-inside-height) - var(--oj-button-height) -2px) / 2);
        }
      }

    } 
    @else
    {
      // height of buttons. we don't want the buttons to bleed outside the wrapper
      .oj-inputnumber .oj-buttonset {
        height: auto;
        box-sizing: border-box;
      }

      // .oj-button adds margin-bottom, so we need to remove it
      .oj-inputnumber .oj-inputnumber-button.oj-button {
        height: 100%;
        line-height: normal;
        margin-bottom: 0;
      }
      .oj-inputnumber .oj-button {
      
          width: var(--oj-input-number-button-width);
        
        
      }



      // border-radius on the buttonset/buttons
      // buttonset uses the form control border radius
      // if there is no space between input and buttons, then use $formControlBorderRadius 
      // for end button (the up button)) and no border-radius for the inside button
      // otherwise default to the buttonset's border-radius
   
      .oj-inputnumber .oj-buttonset {
        html:not([dir="rtl"]) & {
          border-top-left-radius: 0;
          border-bottom-left-radius: 0;
        }
        html[dir="rtl"] & {
          border-top-right-radius: 0;
          border-bottom-right-radius: 0;
        }
      }
      .oj-buttonset-multi.oj-button-full-chrome .oj-inputnumber-button.oj-buttonset-first,
      .oj-buttonset-multi.oj-button-outlined-chrome .oj-inputnumber-button.oj-buttonset-first {
        html:not([dir="rtl"]) & {
          border-top-left-radius: var(--oj-input-number-button-border-radius);
          border-bottom-left-radius: var(--oj-input-number-button-border-radius);
        }
        html[dir="rtl"] & {
          border-top-right-radius: var(--oj-input-number-button-border-radius);
          border-bottom-right-radius: var(--oj-input-number-button-border-radius);
        }
      }
      .oj-inputnumber .oj-buttonset {
        html:not([dir="rtl"]) & {
          border-top-right-radius: var(--oj-text-field-border-radius);
          border-bottom-right-radius: var(--oj-text-field-border-radius);
        }
        html[dir="rtl"] & {
          border-top-left-radius: var(--oj-text-field-border-radius);
          border-bottom-left-radius: var(--oj-text-field-border-radius);
        }
      }
      .oj-buttonset-multi.oj-button-full-chrome .oj-inputnumber-button.oj-buttonset-last,
      .oj-buttonset-multi.oj-button-outlined-chrome .oj-inputnumber-button.oj-buttonset-last {
        html:not([dir="rtl"]) & {
          border-top-right-radius: var(--oj-input-number-button-border-radius);
          border-bottom-right-radius: var(--oj-input-number-button-border-radius);
        }
        html[dir="rtl"] & {
          border-top-left-radius: var(--oj-input-number-button-border-radius);
          border-bottom-left-radius: var(--oj-input-number-button-border-radius);
        }
      }

      // Button styles moved from form controls since these only apply to input number
      .oj-inputnumber .oj-button.oj-button-full-chrome .oj-button-button,
      .oj-inputnumber .oj-button.oj-button-outlined-chrome .oj-button-button,
      .oj-inputnumber .oj-buttonset.oj-button-outlined-chrome .oj-button {
        border-bottom: none;
        border-top: none;
      }

      .oj-inputnumber .oj-button.oj-button-full-chrome .oj-button-button,
      .oj-inputnumber .oj-button.oj-button-outlined-chrome .oj-button-button {
        border-radius: 0;
      }

      .oj-inputnumber .oj-buttonset.oj-button-outlined-chrome .oj-button {
        @include oj-ltr() {
          border-left-color: var(--oj-text-field-button-border-color);
          border-right: none;
        }
        @include oj-rtl() {
          border-left: none;
          border-right-color: var(--oj-text-field-button-border-color);
          // Override border-right-width: 0; property inexplicably set in html[dir=rtl] .oj-buttonset-multi.oj-button-outlined-chrome .oj-buttonset-first rule
          // Why has border-left-width: 0; property not been set in LTR?
          border-right-width: 1px;
        }
      }

      .oj-inputnumber .oj-buttonset.oj-button-full-chrome .oj-button.oj-buttonset-first,
      .oj-inputnumber .oj-buttonset.oj-button-outlined-chrome .oj-button.oj-buttonset-first {
        @include oj-ltr() {
          border-bottom-left-radius: 0;
          border-top-left-radius: 0;
        }
        @include oj-rtl() {
          border-bottom-right-radius: 0;
          border-top-right-radius: 0;
        }
      }

      .oj-inputnumber .oj-buttonset.oj-button-full-chrome .oj-button:not(.oj-buttonset-first),
      .oj-inputnumber .oj-buttonset.oj-button-full-chrome .oj-button:not(.oj-buttonset-first).oj-active,
      .oj-inputnumber .oj-buttonset.oj-button-full-chrome .oj-button:not(.oj-buttonset-first).oj-hover,
      .oj-inputnumber .oj-buttonset.oj-button-outlined-chrome .oj-button:not(.oj-buttonset-first),
      .oj-inputnumber .oj-buttonset.oj-button-outlined-chrome .oj-button:not(.oj-buttonset-first).oj-active,
      .oj-inputnumber .oj-buttonset.oj-button-outlined-chrome .oj-button:not(.oj-buttonset-first).oj-hover {
        @include oj-ltr() {
          border-left-color: var(--oj-text-field-button-border-color);
        }
        @include oj-rtl() {
          border-right-color: var(--oj-text-field-button-border-color);
        }
      }

      // end border-radius on buttonset

      // make borders look like they go around the input and buttonset if there is no space between
      // them.
   
      .oj-inputnumber .oj-inputnumber-button.oj-buttonset-first {
        border-top-width: var(--oj-input-number-button-border-width);
        border-bottom-width: var(--oj-input-number-button-border-width);
      }
      
      .oj-inputnumber .oj-inputnumber-button.oj-buttonset-last {
        @include oj-ltr() {
          border-right-width: var(--oj-input-number-button-border-width);
        }
        @include oj-rtl() {
          border-left-width: var(--oj-input-number-button-border-width);
        }
        border-top-width: var(--oj-input-number-button-border-width);
        border-bottom-width: var(--oj-input-number-button-border-width);
      }

      //disabled up and down buttons
      .oj-inputnumber.oj-disabled .oj-buttonset {
        border-color: var(--oj-text-field-border-color-disabled);
      }
      .oj-inputnumber.oj-disabled .oj-inputnumber-button {
        border-color: var(--oj-button-solid-chrome-border-color-disabled);
      }

      // change color of border around buttons
      .oj-inputnumber .oj-buttonset {
        border-color: var(--oj-text-field-border-color);
        border-width: var(--oj-input-number-buttonset-border-width) var(--oj-input-number-buttonset-border-width) var(--oj-input-number-buttonset-border-width) var(--oj-input-number-buttonset-border-width);
        @include oj-ltr() {
          border-left-width: 0;
        }
        @include oj-rtl() {
          border-right-width: 0;
        }
        border-style: solid;
      }
    }

    // The oj-form-control-inherit selector on an ancestor indicates that the form control should
    // inherit styles, like width/height/borders/colors/text-alignment, etc. This is used for
    // editable datagrid cells and editable table cells
    // -----------------------------------------------------------------------------------------
    // TODO: redo the comments, make mixins for the common properties
    
    // stretch the height
    .oj-form-control-inherit:not(.oj-form-control-default) .oj-inputnumber-wrapper {
      height: 100%;
    }

    // if a focus border width is set reset it back to 0
    // TODO
    @if ($formControlInputBorderWidthFocus != null) {                      
      .oj-form-control-inherit:not(.oj-form-control-default) .oj-inputnumber:not(.oj-read-only).oj-focus .oj-inputnumber-input {
        border-width:0;
      }
    }

    // Theme defaults for properties
    //------------------------------

    $inputNumberDefaultOptions: ();

    @if ($inputNumberStepOptionDefault != null) {
      $inputNumberDefaultOptions: map-merge($inputNumberDefaultOptions, 
      (step: $inputNumberStepOptionDefault));
    }

    @if ($inputNumberButtonChromingOptionDefault != null) {
      $inputNumberDefaultOptions: map-merge($inputNumberDefaultOptions, 
      (buttonChroming: $inputNumberButtonChromingOptionDefault));
    }

    .oj-input-number-option-defaults {
        font-family: oj-json-from-map($inputNumberDefaultOptions) !important;
    }
  }
