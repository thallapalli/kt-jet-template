// Copyright (c) 2014, 2020, Oracle and/or its affiliates.  Licensed under The Universal Permissive License (UPL), Version 1.0 as shown at https://oss.oracle.com/licenses/upl/

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// WARNING: do not directly import this file, instead import the 
//          version in your theme's directory, 
//          for example alta/widgets/_oj.alta.formcontrol.radiocheckbox.scss
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 
 
@import "../../../utilities/_oj.utilities.scss";
 
// generates the css position properties for the hidden radio or checkbox input. Called
// from the mixin oj-radiocheckbox-position-input.
// Note: I use 'auto' in case the default position of the input is left 
// and we want to override it to right with a more specific selector 
// (e.g., .oj-radioset-input-start .oj-radio). In css left takes precedence over right
@mixin oj-radiocheckbox-position-horizontal(
$position, 
$labelPosition: $radioCheckboxLabelPosition) {
  @if($labelPosition == "start") {
    @include oj-ltr() {
      right: $position;
      left: auto;
    }
    @include oj-rtl() {   
      left: $position;
    }
  }
  @else {
    @include oj-ltr() { 
      left: $position;
    }
    @include oj-rtl() {   
      right: $position;
      left: auto;
    }        
  }
}
 
// Call this to generate the css to absolutely position the radio or checkbox input, 
// which is hidden in backgroundImage mode
// but it needs to be positioned under the input image for voiceover to work.
@mixin oj-radiocheckbox-position-input($position) {
  .oj-radio,
  .oj-checkbox {
    @include oj-radiocheckbox-position-horizontal($position);
  }
 
  .oj-radioset-input-start .oj-radio,
  .oj-checkboxset-input-start .oj-checkbox {
    @include oj-radiocheckbox-position-horizontal($position, "end");
  }
  .oj-checkboxset-input-end .oj-checkbox {
    @include oj-radiocheckbox-position-horizontal($position, "start");
  }
}
 
// Add margin around the image. From the edge to the image and from the image to the label text.
// This is needed when the image and the label text are close together.
  .oj-radiocheckbox-icon {   
    @if($radioCheckboxLabelPosition == 'end') {
      @include oj-ltr() {
        margin: 0 var(--oj-radio-checkbox-input-to-label-padding) 0 var(--oj-radio-checkbox-input-to-edge-padding);
      }
      @include oj-rtl() {
        margin: 0 var(--oj-radio-checkbox-input-to-edge-padding) 0 var(--oj-radio-checkbox-input-to-label-padding);
      }   
    } 
    @else {
      @include oj-ltr() {
        margin: 0 var(--oj-radio-checkbox-input-to-edge-padding) 0 var(--oj-radio-checkbox-input-to-label-padding);
      }
      @include oj-rtl() {
        margin: 0 var(--oj-radio-checkbox-input-to-label-padding) 0 var(--oj-radio-checkbox-input-to-edge-padding);
      }             
    }
  }
 
    // make a more specific selector than above if 
    // an input-start or input-end selector is set on the root dom
    // put the margin on the 'inside'.
    .oj-radioset-input-start .oj-radiocheckbox-icon,
    .oj-checkboxset-input-start .oj-radiocheckbox-icon {
      @include oj-ltr() {
        margin: 0 var(--oj-radio-checkbox-input-to-label-padding) 0 var(--oj-radio-checkbox-input-to-edge-padding);      
      }
      @include oj-rtl() {
        margin: 0 var(--oj-radio-checkbox-input-to-edge-padding) 0 var(--oj-radio-checkbox-input-to-label-padding);
      }       
    }
 
    .oj-radioset-input-end .oj-radiocheckbox-icon,
    .oj-checkboxset-input-end .oj-radiocheckbox-icon {
      @include oj-ltr() {
        margin: 0 var(--oj-radio-checkbox-input-to-edge-padding) 0 var(--oj-radio-checkbox-input-to-label-padding);      
      }
      @include oj-rtl() {
        margin: 0 var(--oj-radio-checkbox-input-to-label-padding) 0 var(--oj-radio-checkbox-input-to-edge-padding);
      }       
    }
 
 
 
  @include module-include-once("common.radioset") {
 
    /* radioset and checkboxset styles */
    /* this styles the radio, checkbox, and their labels */
    /* --------------------------------------------------------------- */
 
 
 
    // this file includes classes for ojRadioset and ojCheckboxset.
 
    // This is to prevent the flash of unstyled content before the html becomes JET components.
    // Note: It is intentional that the oj-radioset and oj-checkboxset below do not have the '.' before it.
    // This selector matches the custom element name, not a class name.
    @if $initialVisibility == hidden {
      oj-radioset:not(.oj-complete) {
        visibility: hidden;
      }      
    }
 
    // This is to prevent the flash of unstyled content before the html becomes JET components.
    @if $initialVisibility == hidden {
      oj-checkboxset:not(.oj-complete) {
        visibility: hidden;
      }      
    }
 
    /* App developer should put a span around the input and label, and use this styleclass */
    .oj-choice-item,
    .oj-choice-row {
      display: flex;
      align-items: var(--oj-radio-checkbox-align-items); // based on value it sets top or center.
      margin: 0;
    }
 
    .oj-choice-direction-row .oj-choice-item,
    .oj-choice-row-inline {
      display: inline-flex;
      align-items: var(--oj-radio-checkbox-align-items); // needed so label text and radio/checkbox align center.
      margin: 0;
      padding: var(--oj-radio-checkbox-row-padding) 0 var(--oj-radio-checkbox-row-padding) 0;
    }
 
    // for this case where we hide the input, we want the label to grow so we use flex-property,
    // but only in column and not row because IE doesn't work well
    // if we use inline-flex and flex:1, and it works fine otherwise.
    // if we remove this for non-inline mode, then in Firefox and Chrome and IE, 
    // the label is short and the icon is right after it, so it is a must.
    // Note: flex-basis has to be auto, otherwise in IE the label contents wrap.
    .oj-choice-direction-column .oj-radio-label,
    .oj-choice-direction-column .oj-checkbox-label,
    .oj-choice-row .oj-radio-label,
    .oj-choice-row .oj-checkbox-label {
      flex: 1 1 auto;
    } 
 
    .oj-form .oj-checkboxset-single.oj-choice-direction-column .oj-checkbox-label,
    .oj-form .oj-checkboxset-single.oj-choice-row .oj-checkbox-label {
      flex: 0 1 auto;
    }
 
    // .oj-radioset and .oj-checkboxset are the root dom elements
    .oj-radioset, 
    .oj-checkboxset {
      display: inline-block;
      box-sizing: border-box;
 
        max-width: var(--oj-radio-checkbox-width);
        width: var(--oj-radio-checkbox-width);
 
 
 
    }
 
    .oj-radio-label,
    .oj-checkbox-label {
 
        color: var(--oj-radio-checkbox-label-color);
        font-size: var(--oj-typography-body-md-font-size);
        line-height: var(--oj-typography-body-md-line-height);  
 
 
      display: inline-block;
      font-weight: normal;
      vertical-align: middle;
      // remove ios background-color on tap since we tend to put our own background-color on tap
      -webkit-tap-highlight-color: transparent; 
    }
 
    .oj-radio-label.oj-disabled .oj-radiocheckbox-label-text,
    .oj-checkbox-label.oj-disabled .oj-radiocheckbox-label-text {
 
        color: var(--oj-text-field-value-color-disabled);      
 
 
 
    }
 
    .oj-radio-label.oj-selected,
    .oj-checkbox-label.oj-selected {
 
        color: var(--oj-radio-checkbox-label-color-selected);
 
 
    }
 
    .oj-radio,
    .oj-checkbox {
      display: inline-block;             
    }
 
    // .oj-radioset-wrapper and .oj-checkboxset-wrapper wrap the children of the root dom element.
    // this way we can style the border differently than the border of the inline message block.
    .oj-radioset-wrapper, 
    .oj-checkboxset-wrapper {
      box-sizing: border-box;
 
        background-color: var(--oj-radio-checkbox-set-bg-color);
 
 
    }
 
    // no chrome
    .oj-checkboxset-no-chrome .oj-checkboxset-wrapper,
    .oj-radioset-no-chrome .oj-radioset-wrapper {
      background-color: inherit;
    }
 
 
      .oj-radioset-wrapper,
      .oj-checkboxset-wrapper {
        border-color: var(--oj-radio-checkbox-set-border-color);
        border-style: solid;
        border-width: var(--oj-radio-checkbox-set-border-width);
        border-radius: var(--oj-text-field-border-radius);
      }
 
      // no chrome
      .oj-checkboxset-no-chrome .oj-checkboxset-wrapper,
      .oj-radioset-no-chrome .oj-radioset-wrapper
      {
        border-width: 0;
      }
 
 
 
    // when pressed, the row's background and border changes color.
    .oj-radioset .oj-choice-item.oj-active,
    .oj-checkboxset:not(.oj-checkboxset-single) .oj-choice-item.oj-active,
    .oj-radioset .oj-choice-row.oj-active,
    .oj-radioset .oj-choice-row-inline.oj-active,
    .oj-checkboxset:not(.oj-checkboxset-single) .oj-choice-row.oj-active,
    .oj-checkboxset:not(.oj-checkboxset-single).oj-choice-row-inline.oj-active {
 
        background-color: var(--oj-radio-checkbox-item-bg-color-active);
 
 
    }
 
    .oj-radioset.oj-choice-direction-column .oj-choice-item.oj-active,
    .oj-checkboxset:not(.oj-checkboxset-single).oj-choice-direction-column .oj-choice-item.oj-active {
 
        border-top: 1px solid var(--oj-radio-checkbox-item-divider-color-active);
 
 
    }
 
    // the transparent border is so the text doesn't jump on active when we add a real border
    // we only style oj-choice-item within oj-choice-direction-column inside radioset or checkboxset, 
    // not oj-choice-direction-row with borders.
    .oj-radioset.oj-choice-direction-column .oj-choice-item:first-child,
    .oj-checkboxset.oj-choice-direction-column .oj-choice-item:first-child,
    .oj-radioset .oj-choice-row:first-child,
    .oj-checkboxset .oj-choice-row:first-child  {
      border-top: 1px transparent solid;
    }
 
    // oj-choice-item can be used for an individual, non-component checkbox.
    // so we need to qualify which choice-item we give the divider borders to, the ones in the 
    // radioset or checkboxset
    // remove the padding-top I put on .oj-choice-item that is there for a non-component checkbox.
    .oj-radioset:not(.oj-read-only).oj-choice-direction-column .oj-choice-item,
    .oj-checkboxset:not(.oj-read-only).oj-choice-direction-column .oj-choice-item,
    .oj-radioset:not(.oj-read-only) .oj-choice-row,
    .oj-checkboxset:not(.oj-read-only) .oj-choice-row {
 
        border-top: 1px solid var(--oj-radio-checkbox-item-divider-color);
        padding: var(--oj-radio-checkbox-row-padding) 0 var(--oj-radio-checkbox-row-padding) 0;
 
    }
    
    .oj-checkboxset.oj-read-only .oj-choice-item, 
    .oj-radioset.oj-read-only .oj-choice-item{   
      color: var(--oj-text-field-value-color-read-only);   
      font-size: var(--oj-text-field-font-size-read-only);   
      font-weight: var(--oj-text-field-font-weight-read-only);   
      line-height: var(--oj-text-field-line-height-read-only); 
    }
 
    // border-top of the next child.
    .oj-radioset.oj-choice-direction-column .oj-choice-item.oj-active + .oj-choice-item,
    .oj-checkboxset:not(.oj-checkboxset-single).oj-choice-direction-column .oj-choice-item.oj-active + .oj-choice-item,
    .oj-radioset .oj-choice-row.oj-active + .oj-choice-row,
    .oj-checkboxset:not(.oj-checkboxset-single) .oj-choice-row.oj-active + .oj-choice-row {
 
        border-top: 1px solid var(--oj-radio-checkbox-item-divider-color-active);
 
 
    } 
 
    .oj-radioset.oj-choice-direction-column .oj-choice-item:last-child.oj-active,
    .oj-checkboxset:not(.oj-checkboxset-single).oj-choice-direction-column .oj-choice-item:last-child.oj-active,
    .oj-radioset .oj-choice-row:last-child.oj-active,
    .oj-checkboxset:not(.oj-checkboxset-single) .oj-choice-row:last-child.oj-active {
 
        border-bottom: 1px solid var(--oj-radio-checkbox-item-divider-color-active);
 
 
    } 
    
    // the transparent border is so the text doesn't jump on active when we add a real border
       .oj-choice-direction-column .oj-choice-item:last-child,
       .oj-choice-row:last-child {
         border-bottom: 1px solid transparent;
    }  
 
    // the transparent border is so the text doesn't jump on active when we add a real border
       .oj-choice-direction-column .oj-choice-item:last-child,
       .oj-choice-row:last-child {
         border-bottom: 1px solid transparent;
    }  

    // show an outline on focus for accessibility.
    // usually we would suppress this focus ring on mouse click using
    // :not(.oj-focus-highlight), but it would be unlikely a user clicks
    // on a readonly field with his mouse so for coding simplicity sake,
    // we are not suppressing the focus ring on mouse click.
    .oj-checkboxset.oj-read-only .oj-checkboxset-wrapper:focus, 
    .oj-radioset.oj-read-only .oj-radioset-wrapper:focus {
      @include oj-focus-outline(var(--oj-core-focus-border-color));
    }
 
    /*  oj-choice-row and oj-choice-row-inline have been deprecated 
    on December 07, 2016 in v3.0.0. Use oj-choice-item instead. See release notes. */
    .oj-choice-item,
    .oj-choice-row,
    .oj-choice-row-inline {
      position: relative;
    }
 
    // if the label's text is really long, then I need the min-height on the ::before to work
    // around an IE11 issue: IE11 Flexbox with 
    // min-height not vertically aligning with align-items: center
    .oj-choice-item::before,
    .oj-choice-row::before,
    .oj-choice-row-inline::before {
      content: "";
      display: inline-block;
      visibility: hidden;
 
        min-height: var(--oj-radio-checkbox-row-height);
 
 
 
    }
 
    // The oj-form-control-inherit selector on an ancestor indicates that the form control should
    // inherit styles, like width/height/borders/colors/text-alignment, etc. This is used for
    // editable datagrid cells and editable table cells
    // -----------------------------------------------------------------------------------------
 
    .oj-form-control-inherit:not(.oj-form-control-default) .oj-checkboxset-single.oj-choice-direction-column .oj-choice-item,
    .oj-form-control-inherit:not(.oj-form-control-default) .oj-checkboxset-single .oj-checkboxset-wrapper,
    .oj-form-control-inherit:not(.oj-form-control-default) .oj-checkboxset-single .oj-choice-row {
      margin-bottom: 0; 
      height:100%;
      min-height:100%;
    }
 
    .oj-radiocheckbox-label-text { 
      display:inline-block;
      @if($radioCheckboxLabelPosition == "start") {
        @include oj-ltr() {
 
            padding: 0 0 0 var(--oj-radio-checkbox-label-to-edge-padding);
 
 
        }
        @include oj-rtl() {
 
            padding: 0 var(--oj-radio-checkbox-label-to-edge-padding) 0 0;
 
 
        }
      } @else {
        @include oj-ltr() {
 
            padding: 0 var(--oj-radio-checkbox-label-to-edge-padding) 0 0;
 
 
        }
        @include oj-rtl() {
 
            padding: 0 0 0 var(--oj-radio-checkbox-label-to-edge-padding);
 
 
        }     
      }
    }
 
    .oj-checkboxset-input-end .oj-radiocheckbox-label-text,
    .oj-radioset-input-end .oj-radiocheckbox-label-text {
 
        html:not([dir="rtl"]) & {
          padding: 0 0 0 var(--oj-radio-checkbox-label-to-edge-padding);
        }
        html[dir="rtl"] & {
          padding: 0 var(--oj-radio-checkbox-label-to-edge-padding) 0 0;
        }
 
 
 
    }
 
    // need the @ltr only so it overrides the padding selectors above
    .oj-checkboxset-input-start .oj-radiocheckbox-label-text {
 
        html:not([dir="rtl"]) & {
          padding: 0 var(--oj-radio-checkbox-label-to-edge-padding) 0 0;  
        }
        html[dir="rtl"] & {
          padding: 0 0 0 var(--oj-radio-checkbox-label-to-edge-padding);
        }
 
 
    }
 
    // we wrap the oj-radio and oj-checkbox in a span with .oj-radiocheckbox-icon class on it.
    // in backgroundImage mode, this class has an icon, otherwise it does nothing and shows the input.
    .oj-radioset-input-end .oj-radiocheckbox-icon,
    .oj-checkboxset-input-end .oj-radiocheckbox-icon {
      order: 1;
    }
 
    .oj-radioset-input-start .oj-radio-label,
    .oj-checkboxset-input-start .oj-checkbox-label {
      order: 1;
    }
    
 
 
    // after switching to css vars we no longer support render as html
 
      .oj-radio,
      .oj-checkbox {
        opacity: 0;
        width: 100%;
        position: absolute;
        top: 0;
        height: 90%;
        z-index: 1;
        margin:0;
      }
 
      // TODO
      @include oj-radiocheckbox-position-input(0);
 
      // for keyboard tabbing, show focus ring around the icon
      .oj-choice-item.oj-focus-highlight .oj-radiocheckbox-icon,
      .oj-choice-row.oj-focus-highlight .oj-radiocheckbox-icon,
      .oj-choice-row-inline.oj-focus-highlight .oj-radiocheckbox-icon {
        @include oj-focus-outline(var(--oj-core-focus-border-color));
      }
 
      .oj-radio-label,
      .oj-checkbox-label {
        @include oj-ltr() {
          text-align: left;
        }
        @include oj-rtl() {
          text-align: right;
        }
      }
 
      @if($radioCheckboxLabelPosition == "end") {
        .oj-choice-direction-row .oj-choice-item:not(:last-child) > .oj-radio-label,
        .oj-choice-direction-row .oj-choice-item:not(:last-child) > .oj-checkbox-label {
          @include oj-ltr() {
            margin-right: var(--oj-radio-checkbox-direction-row-inline-padding);
          }
          @include oj-rtl() {
            margin-left: var(--oj-radio-checkbox-direction-row-inline-padding);
          }   
        }
      } @else {
        .oj-choice-direction-row .oj-choice-item:not(:first-child) > .oj-radio-label,
        .oj-choice-direction-row .oj-choice-item:not(:first-child) > .oj-checkbox-label {
          @include oj-ltr() {
            margin-left: var(--oj-radio-checkbox-direction-row-inline-padding);
          }
          @include oj-rtl() {
            margin-right: var(--oj-radio-checkbox-direction-row-inline-padding);
          }   
        }
      }
      .oj-choice-direction-row.oj-radioset-input-start .oj-choice-item:not(:last-child) > .oj-radio-label,
      .oj-choice-direction-row.oj-checkboxset-input-start .oj-choice-item:not(:last-child) > .oj-checkbox-label {
        @include oj-ltr() {
          margin-right: var(--oj-radio-checkbox-direction-row-inline-padding);
        }
        @include oj-rtl() {
          margin-left: var(--oj-radio-checkbox-direction-row-inline-padding);
        }   
      }
      .oj-choice-direction-row.oj-radioset-input-end .oj-choice-item:not(:first-child) > .oj-radio-label,
      .oj-choice-direction-row.oj-checkboxset-input-end .oj-choice-item:not(:first-child) > .oj-checkbox-label {
        @include oj-ltr() {
          margin-left: var(--oj-radio-checkbox-direction-row-inline-padding);
        }
        @include oj-rtl() {
          margin-right: var(--oj-radio-checkbox-direction-row-inline-padding);
        }   
      }
 
      .oj-choice-direction-column.oj-radioset-input-start .oj-choice-item .oj-radio-label,
      .oj-choice-direction-column.oj-checkboxset-input-start .oj-choice-item .oj-checkbox-label {
        @include oj-ltr() {
          margin-right: var(--oj-radio-checkbox-input-to-label-padding);
        }
        @include oj-rtl() {
          margin-left: var(--oj-radio-checkbox-input-to-label-padding);
        }   
      }
 
      .oj-form-control-inherit:not(.oj-form-control-default) .oj-checkbox-label {
        @include oj-ltr() {
          text-align: inherit;
        }
        @include oj-rtl() {
          text-align: inherit;
        }
      }    
 
      .oj-choice-direction-row .oj-choice-item,
      .oj-choice-row-inline {
        border-top-width: 0;
      }
 
      // 
      // label needs to take up the entire row so the user can click anywhere to select the item,
      // thus, height 100%.
      .oj-radio-label, 
      .oj-checkbox-label {
        height: 100%;
        @if($radioCheckboxLabelPosition == "start") {
          order: 0;
        }
        @else {
          order: 1;
        }
      }
 
      .oj-form .oj-checkboxset-single .oj-choice-item,
      .oj-form .oj-checkboxset-single .oj-choice-row
      {      
        justify-content: var(--oj-form-layout-field-inline-justify-content);  
      }
 
      // this is needed to move the label text over to the right (in ltr). the mixin takes
      // care of the fact that IE doesn't support flex: initial
      .oj-form .oj-checkboxset-single .oj-radiocheckbox-label-text {
        flex: 0 1 auto;
      }
 
      // the icon always needs space
      .oj-radiocheckbox-icon {
        @extend .oj-component-icon;
        font-size:var(--oj-radio-checkbox-input-size);
        color:var(--oj-radio-checkbox-input-color-selected);
        box-sizing: border-box;
        background-repeat: no-repeat;
        flex: 0 0 auto;
        line-height: var(--oj-typography-body-md-line-height);
        min-height: var(--oj-typography-body-md-line-height);
        @if($radioCheckboxLabelPosition == "start") {
          order: 1;
        }
        @else {
          order: 0;
        }
      }
 
      // TODO
 
 
      .oj-radioset .oj-radiocheckbox-icon {
        @extend .oj-fwk-icon-radiobutton-off !optional; 
        transform:var(--oj-radio-checkbox-transform-enabled);
        transition:var(--oj-radio-checkbox-transition-unselected);
        color:var(--oj-radio-checkbox-input-color-unselected);
      }
 
      .oj-radioset .oj-selected .oj-radiocheckbox-icon {
        @extend .oj-fwk-icon-radiobutton-on !optional;
        color:var(--oj-radio-checkbox-input-color-selected);
      }
 
      // Hover enabled un selected icon
      .oj-radioset .oj-hover .oj-radiocheckbox-icon {
        @extend .oj-fwk-icon-radiobutton-off !optional; 
        color:var(--oj-radio-checkbox-input-color-unselected);
      }
      // Hover enabled selected icon
      .oj-radioset .oj-selected.oj-hover .oj-radiocheckbox-icon {
        @extend .oj-fwk-icon-radiobutton-on !optional;
        color:var(--oj-radio-checkbox-input-color-selected);
      }
 
      // need to use the active that gets set on the row, not the label, because
      // if they click on the input, it won't make the label get the active class but the 
      // row will still get the active class
      .oj-radioset-wrapper > .oj-active  .oj-radiocheckbox-icon {
        transform:var(--oj-radio-checkbox-transform-active);
        transition:var(--oj-radio-checkbox-transition-active); 
      }
 
      // need to use the active that gets set on the row, not the label, because
      // if they click on the input, it won't make the label get the active class but the 
      // row will still get the active class
      .oj-radioset-wrapper > .oj-selected.oj-active .oj-radiocheckbox-icon {
        transform:var(--oj-radio-checkbox-transform-active);
        transition:var(--oj-radio-checkbox-transition-active);
      }
 
      .oj-radioset .oj-disabled .oj-radiocheckbox-icon {
        @extend .oj-fwk-icon-radiobutton-off !optional;
        color:var(--oj-radio-checkbox-input-color-disabled);
      }
 
      .oj-radioset .oj-disabled.oj-selected .oj-radiocheckbox-icon {
        @extend .oj-fwk-icon-radiobutton-on !optional;
        color:var(--oj-radio-checkbox-input-color-disabled);
      }
 
      // checkbox images
      // ---------------   
      .oj-checkboxset .oj-radiocheckbox-icon {
        @extend .oj-fwk-icon-checkbox-off !optional;
        transform:var(--oj-radio-checkbox-transform-enabled);
        transition:var(--oj-radio-checkbox-transition-active);
        color:var(--oj-radio-checkbox-input-color-unselected);
      }
 
      // Hover enabled un selected icon
      .oj-checkboxset .oj-hover .oj-radiocheckbox-icon {
        @extend .oj-fwk-icon-checkbox-off !optional; 
        color:var(--oj-radio-checkbox-input-color-unselected);
      }
      // Hover enabled selected icon
      .oj-checkboxset .oj-selected.oj-hover .oj-radiocheckbox-icon {
        @extend .oj-fwk-icon-checkbox-on !optional;
        color:var(--oj-radio-checkbox-input-color-selected);
      }
 
      .oj-checkboxset .oj-selected .oj-radiocheckbox-icon {
        @extend .oj-fwk-icon-checkbox-on !optional;
        transform:var(--oj-radio-checkbox-transform-enabled);
        transition:var(--oj-radio-checkbox-transition-active);
        color:var(--oj-radio-checkbox-input-color-selected);
      }
 
      // need to use the active that gets set on the row, not the label, because
      // if they click on the input, it won't make the label get the active class but the 
      // row will still get the active class
      .oj-checkboxset-wrapper > .oj-active .oj-radiocheckbox-icon {
        transform:var(--oj-radio-checkbox-transform-active);     
        transition:var(--oj-radio-checkbox-transition-unselected);
      }
 
      .oj-checkboxset-wrapper > .oj-active.oj-selected .oj-radiocheckbox-icon {
        transform:var(--oj-radio-checkbox-transform-active);
        transition:var(--oj-radio-checkbox-transition-selected);
      }
 
      .oj-checkboxset .oj-disabled .oj-radiocheckbox-icon {
        @extend .oj-fwk-icon-checkbox-off !optional;
        color:var(--oj-radio-checkbox-input-color-disabled);
      }
 
      .oj-checkboxset .oj-disabled.oj-selected .oj-radiocheckbox-icon {
        @extend .oj-fwk-icon-checkbox-on !optional;
        color:var(--oj-radio-checkbox-input-color-disabled);
      }
 
      // order the image and the label text. order 1 means it comes last
      .oj-radioset-input-start .oj-radio-label,
      .oj-checkboxset-input-start .oj-checkbox-label,
      .oj-radioset-input-end .oj-radiocheckbox-icon,
      .oj-checkboxset-input-end .oj-radiocheckbox-icon {
        order: 1;
      }
 
      .oj-radioset-input-start .oj-radiocheckbox-icon,
      .oj-checkboxset-input-start .oj-radiocheckbox-icon,
      .oj-radioset-input-end .oj-radio-label,
      .oj-checkboxset-input-end .oj-checkbox-label {
        order: 0;
      }
 
 
 
    .oj-choice-direction-row.oj-radioset-input-start .oj-choice-item:not(:first-child) > .oj-radio-label,
    .oj-choice-direction-row.oj-checkboxset-input-start .oj-choice-item:not(:first-child) > .oj-checkbox-label {
      @include oj-ltr() {
        margin-left: 0;
      }
      @include oj-rtl() {
        margin-right: 0;
      }   
    }
    .oj-choice-direction-row.oj-radioset-input-end .oj-choice-item:not(:last-child) > .oj-radio-label,
    .oj-choice-direction-row.oj-checkboxset-input-end .oj-choice-item:not(:last-child) > .oj-checkbox-label {
      @include oj-ltr() {
        margin-right: 0;
      }
      @include oj-rtl() {
        margin-left: 0;
      }   
    }
 
    // TODO
    /* Send to the client the renderInputAs variable value  */
    $radioSetDefaultOptions: ();
    $checkboxSetDefaultOptions: ();
 
    @if ($radioCheckboxRenderInputAs) {
      $radioSetDefaultOptions: map-merge($radioSetDefaultOptions, 
        (renderInputAs: $radioCheckboxRenderInputAs));
      $checkboxSetDefaultOptions: map-merge($checkboxSetDefaultOptions, 
        (renderInputAs: $radioCheckboxRenderInputAs));
    }
    .oj-radioset-option-defaults {
      font-family: oj-json-from-map($radioSetDefaultOptions) !important;
    }
    .oj-checkboxset-option-defaults {
      font-family: oj-json-from-map($checkboxSetDefaultOptions) !important;
    }
 
  }