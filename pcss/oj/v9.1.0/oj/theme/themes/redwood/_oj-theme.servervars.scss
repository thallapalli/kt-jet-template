// Copyright (c) 2014, 2020, Oracle and/or its affiliates.  Licensed under The Universal Permissive License (UPL), Version 1.0 as shown at https://oss.oracle.com/licenses/upl/

@import "../../../utilities/_oj.utilities.math.scss";
// todo: go through all of these vars!
// todo: get rid of all these settings: ignore values!

$dialogFooterIntegrateButtons:                          false !default; //settings: ignore
$dialogCloseIconPosition:                               center !default; //settings: ignore
$dialogHeaderTextAlign:                                 start !default; //settings: ignore
$formLayoutLabelInlineAlign:                            end !default; //settings: ignore



//------------------------------------------------------------
// do not move anything below this line to the common directory,
// all the variables you see here are either deprecated or not yet public



// ideally we will use css generated tails in future, so
// hiding these vars for now.
$popupTailSimpleWidth:  10px !default; //settings: ignore
$popupTailSimpleHeight: 10px !default; //settings: ignore
$popupTailBorderColor:      hsl(203, 2%, 80%) !default; //settings: ignore
$popupTailBorderWidth:      1px !default; //settings: ignore
$popupTailBgcolor:          hsl(203, 2%, 99%) !default; //settings: ignore
$popupTailBoxShadow:        0 0 5px 0 unquote("hsla(0, 0%, 0%,0.2)") !default; //settings: ignore
$overlayBgColor:    unquote("hsl(0, 0%, 0%)") !default; //settings: ignore

// To avoid strip unit function these 3 raw values added for popup svg calc.
$popupTailBorderWidthRawValue: 1 !default; //settings: ignore
$popupTailSimpleWidthRawValue:  10 !default; //settings: ignore
$popupTailSimpleHeightRawValue: 10 !default; //settings: ignore

// INITIAL VISIBILITY
//----------------------------------
// when $initialVisiblity is hidden then visibility: hidden is set on the dom until the
// component is initialized. This reduces the unstyled dom seen by the user during page load.
$initialVisibility: hidden !default; //settings: ignore

$themeName:                                             redwood !default;
$themeTargetPlatform:                                   all !default;

// PATHS
//----------------------------------
// these paths should be relative to the generated css file
// path to images
$imageDir: "images/" !default;

// path to (icon) fonts
$fontDir: "fonts/" !default;

// path to common images (images shared across themes)
$commonImageDir: "../common/images/" !default;


// COMPATIBILITY
//----------------------------------
// when $allowTagSelectors is true JET directly styles certain tags like
// <p> <a> <h1>, etc. However for developers trying to mix JET with other
// technologies styling these tags directly could cause issues on other parts of the page.
// In that case set $allowTagSelectors: false;.
// See the "compatibility" section of the theming documentation for more information
$allowTagSelectors: true !default;
$includeIconClasses: true !default;


// focus
//----------------------------------
// This variable is applicable to components and patterns that use the oj-focus-highlight class
// and do not have a component- or pattern-specific mechanism for controlling when it is applied.
//
// The oj-focus-highlight class applies focus styling that may not be desirable
// when the focus results from pointer interaction (touch or mouse), but which is
// needed for accessibility when the focus occurs by a non-pointer mechanism, for
// example keyboard or initial page load.
//
// The 3 valid values of this variable indicate for which focuses the class should be applied:
//
// - "nonPointer": the class is applied only for focuses not resulting from pointer
//   (mouse or touch) interaction.
// - "all": the class is applied for all focuses.
// - "none": the class is never applied. This value is not accessible by itself, and is
//   intended for use when the application wishes to use its own event listener to precisely
//   control when the class is applied.  The application must ensure the accessibility of the result.
$focusHighlightPolicy: nonPointer !default;



// wrappable
//----------------------------------
// this margin is needed so that if components are laid out
// next to one another and wrap onto a new line there is
// some vertical space between the "rows". For example when
// several buttons are laid out next to each other on a small screen
// some may wrap onto a new line, this puts some space
// between these buttons.
//todo
$wrappableMarginBottom:  4px !default;

// responsive screen sizes
//----------------------------------
// In some apps it may be preferable to change
// these values to rems instead of pixels.
//
// For pixel values here is some helpful info on device sizes:
// http://www.mydevice.io/devices/
// $screenSmallRange:  0, 767px !default;
// $screenMediumRange: 768px, 1023px !default;
// $screenLargeRange:  1024px, 1280px !default;
// $screenXlargeRange: 1281px, null !default;

$screenSmallMinWidth:     0 !default;
$screenSmallMaxWidth:     599.9px !default;
$screenMediumMinWidth:    600px !default;
$screenMediumMaxWidth:    1023.9px !default;
$screenLargeMinWidth:     1024px !default;
$screenLargeMaxWidth:     1439.9px !default;
$screenXlargeMinWidth:    1440px !default;
$screenXlargeMaxWidth:    null !default;


// responsive media queries
//----------------------------------
// You will see "print" on some media queries below.
// By default printing portrait is treated as a medium screen and
// printing landscape is treated as a large screen.

// the $responsiveQueryXYZ variables can be set to 'none' if
// you don't want to render a particular set of classes,
// for example if you don't want xlarge classes you could set:
//    $screenLargeRange:          1024px, null !default;
//    $screenXlargeRange:         none;
//    $responsiveQueryLargeOnly:  none;
//    $responsiveQueryXlargeUp:   none;
$responsiveQuerySmallUp:    "print, screen" !default;
$responsiveQuerySmallOnly:  "screen and (max-width: #{$screenSmallMaxWidth})" !default;

$responsiveQueryMediumUp:   "print, screen and (min-width: #{$screenMediumMinWidth})" !default;
$responsiveQueryMediumOnly: "print and (orientation: portrait), screen and (min-width: #{$screenMediumMinWidth}) and (max-width: #{$screenMediumMaxWidth})" !default;
$responsiveQueryMediumDown: "print and (orientation: portrait), screen and (max-width: #{$screenMediumMaxWidth})" !default;

$responsiveQueryLargeUp:    "print and (orientation: landscape), screen and (min-width: #{$screenLargeMinWidth})" !default;
$responsiveQueryLargeOnly:  "print and (orientation: landscape), screen and (min-width: #{$screenLargeMinWidth}) and (max-width: #{$screenLargeMaxWidth})" !default;
$responsiveQueryLargeDown:  "print and (orientation: landscape), screen and (max-width: #{$screenLargeMaxWidth})" !default;

$responsiveQueryXlargeUp:   "screen and (min-width: #{$screenXlargeMinWidth})" !default;
// by default there is no xxl screen range variable.
// to add support for an xxl range you can do something like
// the following in your settings file :
//
//     @import "../utilities/_oj.utilities.math.scss"; // change the path to where the utilities directory is
//     $screenXlargeRange:          1281px, 1440px;
//     $screenXXlargeRange:         1441px, null;
//     $responsiveQueryXlargeOnly:  "screen and (min-width: #{lower-bound($screenXlargeRange)}) and (max-width: #{upper-bound($screenXlargeRange)}).scss";
//     $responsiveQueryXlargeDown:  "screen and (max-width: #{upper-bound($screenXlargeRange)}).scss";
//     $responsiveQueryXXlargeUp:   "screen and (min-width: #{lower-bound($screenXXlargeRange)}).scss";
$responsiveQueryXlargeOnly: null !default;
$responsiveQueryXlargeDown: null !default;
$responsiveQueryXXlargeUp:  null !default;

// by default the print query is set to null,
// to generate print classes change the value to "print"
$responsiveQueryPrint:      null !default;

// the default point at which we consider a screen a high resolution
// (or retina) display.
//
// The value is set to 1.5 because as of 2014 there's a lot
// of Android devices out there that are half-way between the
// legacy screen resolutions and retina (aka "xhdpi" in Google's terminology)
// they use a 1.5 factor so the default device pixel ratio is 1.5
//
// NOTE: in order to allow stand alone use of these utility mixins
// this variable is also defined in _oj.utilities.icons.scss.
// Because of the !default, the actual value will be the value
// in the file loaded first.
$highResolutionDevicePixelRatio: 1.5 !default;

// todo: get rid of these?
$responsiveGenerateHide:                  true !default;
$responsiveGenerateSpacing:               true !default;
$responsiveGenerateTextAlignEnd:          true !default;
$responsiveGenerateFloatStart:            true !default;
$responsiveGenerateFloatEnd:              true !default;





// loading indicator
//------------------------------------
// Duration in ms before showing load indicator
// Currently this is used by collection components such as datagrid, table, listview
// but is generally applicable in places where loading indicator is used
$loadingIndicatorDelayDuration: "50" !default;

// animation delay between cards, used by listview and waterfall
$cardEntranceAnimationDelayIncrement: "50" !default;

// todo: why are these here? they should be in css vars
$formControlBorderWidth: 1px 1px 1px 1px !default;
$formControlMessagingBorderWidth: 2px 2px 2px 2px !default;
$formControlInputBorderWidthFocus: $formControlBorderWidth !default;
$formControlLabelEdgeDefault: inside !default;
// todo: why do I get a compile error if I don't have this here?
$inputFormControlReadonlyDefault: div !default;
$formControlUseUserAssistanceOptionDefault: use !default;
